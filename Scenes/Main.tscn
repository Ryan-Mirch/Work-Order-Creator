[gd_scene load_steps=17 format=2]

[ext_resource path="res://Theme/theme.tres" type="Theme" id=1]
[ext_resource path="res://Fonts/Roboto26.tres" type="DynamicFont" id=2]
[ext_resource path="res://Scenes/Page Instance.tscn" type="PackedScene" id=3]
[ext_resource path="res://Fonts/Roboto16.tres" type="DynamicFont" id=4]
[ext_resource path="res://Fonts/Roboto18.tres" type="DynamicFont" id=5]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
onready var SideBar = $\"Side Bar\"

onready var TopBar = $\"Top Bar\"
onready var PageView = $\"Page View\"
onready var PageList = $\"Side Bar/PageList Background/PageList\"
onready var Projects = $\"Projects\"

onready var savedStateLabel = $\"Top Bar/Viewport/Top Bar Background/VBox/BottomRow/Saved State\"

var saveTime = -1


# Called when the node enters the scene tree for the first time.
func _ready():
	
	get_tree().get_root().connect(\"size_changed\", self, \"_screen_size_changed\")
	_screen_size_changed()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if saveTime >= 0:
		saveTime += delta
	
	if Global.state == 1 && saveTime > 0.2:
		Projects._on_Save_pressed()
		saveTime = -1
		savedStateLabel.text = \"Saved\"
		
func _save():
	saveTime = 0
	savedStateLabel.text = \"Unsaved\"
	
func _screen_size_changed():
	
	SideBar.rect_size.y = get_viewport().size.y + 10
	
	TopBar.rect_size.x = get_viewport().size.x + 10
	
	PageView.rect_size.y = get_viewport().size.y - TopBar.rect_size.y - 50
	
	var page_space = get_viewport().size.x - SideBar.rect_size.x
	
	if(get_viewport().size.x > 850 + SideBar.rect_size.x):
		PageView.rect_position.x = SideBar.rect_size.x + (page_space - 850)*0.5
	else:
		PageView.rect_position.x = SideBar.rect_size.x

	"

[sub_resource type="GDScript" id=2]
script/source = "extends FileDialog

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
onready var PageViewport = $\"../Page View/ViewportContainer/Viewport\"
onready var pageList = $\"../Side Bar/PageList Background/PageList\"

var folder
var elapsed_seconds = 0
var picture_interval = 0.2
var screenshotsNeeded = 0
var pageIndex = 0
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.

func _process(delta):
	if screenshotsNeeded > 0:
		elapsed_seconds += delta
		
	if elapsed_seconds > picture_interval:
		elapsed_seconds = 0
		_take_screenshot(pageList.get_item_text(pageIndex))
		
		
func _on_FileDialog_dir_selected(dir):
	folder = dir
	pageIndex = 0
	var pages = get_tree().get_nodes_in_group(\"Page Instance\")		
	pageList._open_page(pageIndex)	
	
	#this kicks off the screenshot taking
	screenshotsNeeded = pages.size()
	
	
func _take_screenshot(name):
	var img = PageViewport.get_texture().get_data()
	img.flip_y()
	
	var datetime = Global._get_date_and_time()
	print(datetime)
	var path = folder + \"/\" +  name + \" - \" + datetime + \".png\"
	img.save_png(path)
	
	screenshotsNeeded -= 1
	pageIndex += 1
	
	if screenshotsNeeded == 0:
		_finished()
		return
	
	pageList._open_page(pageIndex)

	
func _finished():
	print(\"done\")
	Global._editing_start()
	

func _on_Export_pressed():
	Global._exporting_start()	
	popup()
	rect_position.x = 350
	rect_position.y = 110

func _on_Save_Pages_As_PNG_popup_hide():
	if screenshotsNeeded == 0:
		Global._editing_start()
"

[sub_resource type="GDScript" id=3]
script/source = " extends WindowDialog

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
signal currentProjectSet(n)

onready var pageList = $\"../Side Bar/PageList Background/PageList\"

var currentProject = \"\"
# Called when the node enters the scene tree for the first time.
func _ready():
	$\"OptionButton\".connect(\"item_selected\", self, \"_filter_Itemlist\")
	$\"LineEdit\".connect(\"text_changed\", self, \"_filter_Itemlist\")
	
	_filter_Itemlist(1)
	
	$\"ItemList\".select(0)
	popup()
	rect_position.x = 350
	rect_position.y = 110


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _filter_Itemlist(s):
	var customer = $\"OptionButton\".get_item_text($\"OptionButton\".selected)
	var search = $\"LineEdit\".text
	
	print(\"search: \" + search)
	print(\"customer: \" + customer)
	
	$\"ItemList\".clear()
	var names = _get_all_project_names()
	for n in names:
		n = n.replace(\".save\",\"\")
		$\"ItemList\".add_item(n)
		
	_set_Projects_Metadata()
	
	if customer != \"All Customers\":
		var itemCount = $\"ItemList\".get_item_count() - 1		
		var index = itemCount
		while index >= 0:
			if $\"ItemList\".get_item_metadata(index) != customer:
				$\"ItemList\".remove_item(index)
			index -= 1
	
	if search != null && search != \"\":
		var itemCount = $\"ItemList\".get_item_count() - 1
		var index = itemCount
		while index >= 0:
			if !(search in $\"ItemList\".get_item_text(index)):
				$\"ItemList\".remove_item(index)
			index -= 1
		

			
func _set_Projects_Metadata():
	for i in range(0, $\"ItemList\".get_item_count()):
		var save_file = File.new()
		
		save_file.open(\"user://\" + $\"ItemList\".get_item_text(i) + \".save\", File.READ)
		
		var customer = \"\"
		var current_line = parse_json(save_file.get_line())			
		if current_line == null: break
		customer = current_line[\"Customer\"]
			
		save_file.close()
		$\"ItemList\".set_item_metadata(i, customer)

	
func _on_Projects_about_to_show():
	Global._popup_start()
	_filter_Itemlist(1)
	$OptionButton._update()
	
	
func _on_Projects_pressed():
	popup()
	
	
	
func _on_Projects_popup_hide():
	Global._editing_start()
	if currentProject == \"\":
		popup()
		
func _remove_all_pages():
	var pages = get_tree().get_nodes_in_group(\"Page Instance\")
	for i in pages:
		i.remove_from_group(\"Page Instance\")
		i.name = \"!!!!!!\" + i.name + \"!!!!!!\"
		i.queue_free()
	$\"../Side Bar/PageList Background/PageList\".clear()
	
func _load(n):
	if $\"ItemList\".get_item_count() == 0:
		print(\"no projects available. Please create a project\")
		return
	var save_file = File.new()
	if not save_file.file_exists(\"user://\"+ n + \".save\"):
		print(\"save does not exist\")
		return
		
	_remove_all_pages()
	
	save_file.open(\"user://\" + n + \".save\", File.READ)
	
	var page = load(\"res://Scenes/Page Instance.tscn\")
	var index = 0
	while not save_file.eof_reached():
		var current_line = parse_json(save_file.get_line())
		
		if current_line == null: break
		
		var pageInstance = page.instance()
		$\"../Page View/ViewportContainer/Viewport\".add_child(pageInstance)
		
		pageInstance._load(current_line)
		
	save_file.close()
	
	for s in get_tree().get_nodes_in_group(\"Shape\"):
		s._set_dimension_visibility()
	
	_set_current_project(n)
	
	visible = false
	
	pageList._open_page(0)
	
func _set_current_project(n):
	currentProject = n
	emit_signal(\"currentProjectSet\", n)
	
func _save(n):
	var save_file = File.new()
	save_file.open(\"user://\" + n +\".save\", File.WRITE)
	var pages = get_tree().get_nodes_in_group(\"Page Instance\")
	
	for i in pages:
		var page_data = i._save()
		save_file.store_line(to_json(page_data))
	
	save_file.close()
	
	print(n + \" saved\")


func _on_Save_pressed():
	_save(currentProject)


func _on_NewProject_newProject(n):
	
	var pages = get_tree().get_nodes_in_group(\"Page Instance\")
	
	_remove_all_pages()
		
	var page = load(\"res://Scenes/Page Instance.tscn\")
	var pageInstance = page.instance()	
	pageInstance.name = \"Page 1\"
	
	$\"../Page View/ViewportContainer/Viewport\".add_child(pageInstance)
	pageInstance._add_row(0)
	_save(n)
	
	$\"ItemList\".add_item(n)
	var index = $\"ItemList\".get_item_count() - 1
	$\"ItemList\".select(index)
	
	_load(_get_selected_project())

func _on_Open_pressed():
	_load(_get_selected_project())
	
	
func _get_selected_project():
	if $\"ItemList\".get_item_count() == 0:
		return
	var selectedIndex = $\"ItemList\".get_selected_items()[0]
	var projectName = $\"ItemList\".get_item_text(selectedIndex)
	
	print (\"loading \" + projectName)
	return projectName
	
func _get_all_project_names():
	var path = \"user://\"
	var files = []
	var names = []
	var dir = Directory.new()
	dir.open(path)
	dir.list_dir_begin()
	
	while true:
	    var file = dir.get_next()
	    if file == \"\":
	        break
	    elif not file.begins_with(\".\"):
	        files.append(file)
	
	dir.list_dir_end()
	
	for n in files:
		n = n.replace(\".save\",\"\")
		names.append(n)
	
	return names

"

[sub_resource type="GDScript" id=4]
script/source = "extends ConfirmationDialog

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
signal newProject(n)

onready var lineEdit = $\"LineEdit\"
onready var itemList = $\"../../../ItemList\"
# Called when the node enters the scene tree for the first time.
func _ready():
	register_text_enter($\"LineEdit\")

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _on_Create_New_pressed():
	popup()
	rect_position.x = get_viewport().get_mouse_position().x - rect_size.x/2
	rect_position.y = get_viewport().get_mouse_position().y - rect_size.y - 30
	lineEdit.grab_focus()

func _on_NewProject_confirmed():
	var newName = $\"LineEdit\".text
	var nameList = $\"../../..\"._get_all_project_names()
	
	for n in nameList:
		if n == newName:
			print(\"name cant be same as existing name\")
			return
	
	if newName == \"\" || newName == null:
		print(\"name cant be blank name\")
		return
		
	emit_signal(\"newProject\", newName)
	
"

[sub_resource type="GDScript" id=5]
script/source = "extends ConfirmationDialog

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
onready var lineEdit = $\"LineEdit\"
onready var itemList = $\"../../../ItemList\"

# Called when the node enters the scene tree for the first time.
func _ready():
	register_text_enter($\"LineEdit\")

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
func _on_Rename_pressed():
	if itemList.get_item_count() == 0:
		print(\"no projects available. Please create a project\")
		return
		
	popup()
	rect_position.x = get_viewport().get_mouse_position().x - rect_size.x/2
	rect_position.y = get_viewport().get_mouse_position().y - rect_size.y - 30
	lineEdit.grab_focus()


func _on_Rename_Popup_confirmed():
	var index = itemList.get_selected_items()[0]
	var oldName = itemList.get_item_text(index)
	var newName = lineEdit.text
	
	var oldNameDir = \"user://\" + oldName + \".save\"
	var newNameDir = \"user://\" + newName + \".save\"
	
	for i in range(itemList.get_item_count()):
		if itemList.get_item_text(i) == newName:
			print(\"cant rename to existing name\")
			return
	
	if newName == \"\" || newName == null:
		print(\"cant rename to blank name\")
		return
		
	itemList.set_item_text(index, newName)
	var dir = Directory.new()
	dir.rename(oldNameDir,newNameDir)
	
	var projects = $\"../../..\"
	if projects.currentProject == oldName:
		projects._set_current_project(newName)"

[sub_resource type="GDScript" id=6]
script/source = "extends Button

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
onready var itemList = $\"../../ItemList\"
onready var projects = $\"../..\"
onready var currentProjectLabel = $\"../../../Top Bar/Viewport/Top Bar Background/Left/Project Title/Current Project Name\"
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _on_Delete_pressed():
	if itemList.get_item_count() == 0:
		print(\"no projects available. Please create a project\")
		return
		
	var index = itemList.get_selected_items()[0]
	var deleteName = itemList.get_item_text(index)
	var currentProjectName = $\"../..\".currentProject
	
	var dir = Directory.new()
	dir.remove(\"user://\" + deleteName + \".save\")
	itemList.remove_item(index)
	
	if deleteName == currentProjectName:
		projects._remove_all_pages()
		currentProjectLabel.text = \"\"
		projects.currentProject = \"\"
		
	var newIndex = index - 1
	if newIndex < 0: newIndex = 0	
	
	if itemList.get_item_count() == 0: return
	
	itemList.select(newIndex)
"

[sub_resource type="GDScript" id=7]
script/source = "extends OptionButton

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _update():
	clear()
	add_item(\"All Customers\")
	for i in range(0, $\"../ItemList\".get_item_count()):
		var customer = $\"../ItemList\".get_item_metadata(i)
		if customer != \"\" && customer != null:
			add_item(customer)
"

[sub_resource type="GDScript" id=8]
script/source = "extends ItemList

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

onready var pageViewport = $\"../../../Page View/ViewportContainer/Viewport\"
onready var selected = 0
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
func _rename_item(index, newName):
	for pageInstance in get_tree().get_nodes_in_group(\"Page Instance\"):
		if pageInstance.name == newName:
			return
	
	var oldName = get_item_text(index)
	set_item_text(index, newName)
	for pageInstance in get_tree().get_nodes_in_group(\"Page Instance\"):
		if pageInstance.name == oldName:
			pageInstance.name = newName
			break

func _open_page(index):
	if index < 0:
		index = 0
	if index < get_item_count():
		select(index)
		_on_ItemList_item_selected(index)

func _on_ItemList_item_selected(index):
	selected = index
	for pageInstance in get_tree().get_nodes_in_group(\"Page Instance\"):
		if get_item_text(index) == pageInstance.name:
			pageInstance.visible = true
		else:
			pageInstance.visible = false


func _on_Add_Page_pressed():
	var page = load(\"res://Scenes/Page Instance.tscn\")
	var page_instance = page.instance()
	pageViewport.add_child(page_instance)
	Global._save()

func _on_Remove_Page_pressed():
	if get_item_count() <= 1:
		return
	
	var index = get_selected_items()[0]
	var nameToDelete = get_item_text(index)
	
	for pageInstance in get_tree().get_nodes_in_group(\"Page Instance\"):
		if nameToDelete == pageInstance.name:
			pageInstance.queue_free()
			break
			
	remove_item(index)
	
	_open_page(index - 1)
				
	Global._save()"

[sub_resource type="GDScript" id=9]
script/source = "extends Button

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
var absoluteDirPath = OS.get_user_data_dir()
# Called when the node enters the scene tree for the first time.
func _ready():
	pass

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


func _on_Files_pressed():
	OS.shell_open(str(\"file://\", absoluteDirPath))
"

[sub_resource type="GDScript" id=10]
script/source = "extends Label

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


func _on_Projects_currentProjectSet(n):
	text = n
"

[sub_resource type="GDScript" id=11]
script/source = "extends Label

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called when the node enters the scene tree for the first time.
func _ready():
	text = Global.softwareVersion

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[node name="Main" type="Node2D"]
script = SubResource( 1 )

[node name="Save Pages As PNG" type="FileDialog" parent="."]
margin_left = 1718.0
margin_top = 27.0
margin_right = 2230.0
margin_bottom = 383.0
focus_mode = 2
window_title = "Choose A Folder To Store Pictures"
resizable = true
mode_overrides_title = false
mode = 2
access = 2
current_dir = "C:/Users/rwmir/Development/Godot/Projects/Work-Order-Creator"
current_path = "C:/Users/rwmir/Development/Godot/Projects/Work-Order-Creator/"
script = SubResource( 2 )

[node name="Projects" type="WindowDialog" parent="."]
visible = true
margin_left = 1241.0
margin_top = 29.05
margin_right = 1891.0
margin_bottom = 429.05
rect_min_size = Vector2( 446, 200 )
theme = ExtResource( 1 )
window_title = "Projects"
resizable = true
script = SubResource( 3 )

[node name="ItemList" type="ItemList" parent="Projects"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 30.0
margin_top = 50.0
margin_right = -30.0
margin_bottom = -50.0
custom_constants/vseparation = 10
custom_constants/hseparation = 100

[node name="HBoxContainer" type="HBoxContainer" parent="Projects"]
editor/display_folded = true
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -40.0
margin_bottom = -10.0
custom_constants/separation = 7
alignment = 1

[node name="Create New" type="Button" parent="Projects/HBoxContainer"]
margin_left = 134.0
margin_right = 224.0
margin_bottom = 30.0
rect_min_size = Vector2( 90, 0 )
custom_colors/font_color = Color( 0.180392, 0.741176, 0.129412, 1 )
text = "Create New"

[node name="NewProject" type="ConfirmationDialog" parent="Projects/HBoxContainer/Create New"]
margin_left = -47.6482
margin_top = 71.2384
margin_right = 200.352
margin_bottom = 157.238
window_title = "Create New Project"
script = SubResource( 4 )

[node name="LineEdit" type="LineEdit" parent="Projects/HBoxContainer/Create New/NewProject"]
margin_left = 8.0
margin_top = 8.0
margin_right = 240.0
margin_bottom = 50.0
custom_fonts/font = ExtResource( 2 )
placeholder_text = "New Project Name"
placeholder_alpha = 0.25
caret_blink = true
caret_blink_speed = 0.5

[node name="Open" type="Button" parent="Projects/HBoxContainer"]
margin_left = 231.0
margin_right = 321.0
margin_bottom = 30.0
rect_min_size = Vector2( 90, 0 )
text = "Open"

[node name="Rename" type="Button" parent="Projects/HBoxContainer"]
margin_left = 328.0
margin_right = 418.0
margin_bottom = 30.0
rect_min_size = Vector2( 90, 0 )
text = "Rename"

[node name="Rename Popup" type="ConfirmationDialog" parent="Projects/HBoxContainer/Rename"]
margin_left = 17.5248
margin_top = 69.8064
margin_right = 265.525
margin_bottom = 155.806
window_title = "Rename Project"
script = SubResource( 5 )

[node name="LineEdit" type="LineEdit" parent="Projects/HBoxContainer/Rename/Rename Popup"]
margin_left = 8.0
margin_top = 8.0
margin_right = 240.0
margin_bottom = 50.0
custom_fonts/font = ExtResource( 2 )
placeholder_text = "Project Name"
placeholder_alpha = 0.25
caret_blink = true
caret_blink_speed = 0.5

[node name="Delete" type="Button" parent="Projects/HBoxContainer"]
margin_left = 425.0
margin_right = 515.0
margin_bottom = 30.0
rect_min_size = Vector2( 90, 0 )
custom_colors/font_color = Color( 0.803922, 0.129412, 0.129412, 1 )
text = "Delete"
script = SubResource( 6 )

[node name="OptionButton" type="OptionButton" parent="Projects"]
anchor_right = 0.5
margin_left = 30.0
margin_top = 8.0
margin_right = -5.0
margin_bottom = 39.0
text = "All Customers"
items = [ "All Customers", null, false, 0, null ]
selected = 0
script = SubResource( 7 )

[node name="LineEdit" type="LineEdit" parent="Projects"]
anchor_left = 0.5
anchor_right = 1.0
margin_left = 5.0
margin_top = 9.0
margin_right = -32.0
margin_bottom = 39.0
placeholder_text = "Search Projects"

[node name="Page View" type="ScrollContainer" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 199.993
margin_top = 75.0
margin_right = 1069.99
margin_bottom = 775.0
rect_clip_content = false
scroll_horizontal_enabled = false

[node name="ViewportContainer" type="ViewportContainer" parent="Page View"]
margin_right = 850.0
margin_bottom = 1100.0
rect_min_size = Vector2( 850, 1100 )
mouse_filter = 2

[node name="Viewport" type="Viewport" parent="Page View/ViewportContainer" groups=[
"Viewport",
]]
size = Vector2( 850, 1100 )
transparent_bg = true
handle_input_locally = false
disable_3d = true
usage = 0
render_target_update_mode = 3

[node name="bg Exporting" type="ColorRect" parent="Page View/ViewportContainer/Viewport"]
margin_right = 900.0
margin_bottom = 1200.0
mouse_filter = 2

[node name="bg Editing" type="ItemList" parent="Page View/ViewportContainer/Viewport" groups=[
"Background",
]]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[node name="Page Instance" parent="Page View/ViewportContainer/Viewport" instance=ExtResource( 3 )]
visible = false

[node name="Side Bar" type="ColorRect" parent="."]
margin_right = 200.0
margin_bottom = 850.0
color = Color( 0.478431, 0.478431, 0.478431, 1 )

[node name="HBoxContainer" type="HBoxContainer" parent="Side Bar"]
anchor_right = 1.0
margin_top = 67.0
margin_right = 23.0
margin_bottom = 97.0
rect_scale = Vector2( 0.9, 0.9 )
custom_constants/separation = 18
alignment = 1

[node name="Add Page" type="Button" parent="Side Bar/HBoxContainer"]
margin_left = 18.0
margin_right = 89.0
margin_bottom = 30.0
mouse_filter = 1
text = "Add Page"

[node name="Remove Page" type="Button" parent="Side Bar/HBoxContainer"]
margin_left = 107.0
margin_right = 205.0
margin_bottom = 30.0
text = "Remove Page"

[node name="PageList Background" type="ColorRect" parent="Side Bar"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 15.0
margin_top = 100.0
margin_right = -15.0
margin_bottom = -20.0
color = Color( 0.772549, 0.772549, 0.772549, 1 )

[node name="PageList" type="ItemList" parent="Side Bar/PageList Background"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/vseparation = 15
custom_constants/hseparation = 100
script = SubResource( 8 )

[node name="Top Bar" type="ViewportContainer" parent="."]
editor/display_folded = true
margin_right = 1195.0
margin_bottom = 60.0
rect_min_size = Vector2( 850, 50 )
stretch = true

[node name="Viewport" type="Viewport" parent="Top Bar" groups=[
"Viewport",
]]
size = Vector2( 1195, 60 )
transparent_bg = true
handle_input_locally = false
disable_3d = true
usage = 0
render_target_update_mode = 3

[node name="Top Bar Background" type="ColorRect" parent="Top Bar/Viewport"]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.478431, 0.478431, 0.478431, 1 )

[node name="VBox" type="VBoxContainer" parent="Top Bar/Viewport/Top Bar Background"]
margin_right = 40.0
margin_bottom = 40.0

[node name="TopRow" type="HBoxContainer" parent="Top Bar/Viewport/Top Bar Background/VBox"]
margin_right = 570.0
margin_bottom = 25.0
mouse_filter = 2
custom_constants/separation = 0

[node name="Projects" type="Button" parent="Top Bar/Viewport/Top Bar Background/VBox/TopRow"]
margin_right = 110.0
margin_bottom = 25.0
rect_min_size = Vector2( 110, 0 )
mouse_filter = 1
custom_fonts/font = ExtResource( 4 )
text = "Projects"

[node name="Export" type="Button" parent="Top Bar/Viewport/Top Bar Background/VBox/TopRow"]
margin_left = 110.0
margin_right = 220.0
margin_bottom = 25.0
rect_min_size = Vector2( 110, 0 )
mouse_filter = 1
custom_fonts/font = ExtResource( 4 )
text = "Export"

[node name="Settings" type="Button" parent="Top Bar/Viewport/Top Bar Background/VBox/TopRow"]
visible = false
margin_left = 220.0
margin_right = 330.0
margin_bottom = 25.0
rect_min_size = Vector2( 110, 0 )
custom_fonts/font = ExtResource( 4 )
text = "Settings"

[node name="Files" type="Button" parent="Top Bar/Viewport/Top Bar Background/VBox/TopRow"]
visible = false
margin_left = 220.0
margin_right = 330.0
margin_bottom = 25.0
rect_min_size = Vector2( 110, 0 )
custom_fonts/font = ExtResource( 4 )
text = "Files"
script = SubResource( 9 )

[node name="BottomRow" type="HBoxContainer" parent="Top Bar/Viewport/Top Bar Background/VBox"]
margin_top = 29.0
margin_right = 570.0
margin_bottom = 51.0
custom_constants/separation = 20

[node name="spacer" type="Control" parent="Top Bar/Viewport/Top Bar Background/VBox/BottomRow"]
margin_bottom = 22.0

[node name="Saved State" type="Label" parent="Top Bar/Viewport/Top Bar Background/VBox/BottomRow"]
margin_left = 20.0
margin_top = 1.0
margin_right = 65.0
margin_bottom = 20.0
custom_fonts/font = ExtResource( 4 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
text = "Saved"

[node name="Project Title" type="HBoxContainer" parent="Top Bar/Viewport/Top Bar Background/VBox/BottomRow"]
margin_left = 85.0
margin_right = 570.0
margin_bottom = 22.0
custom_constants/separation = 8

[node name="Project" type="Label" parent="Top Bar/Viewport/Top Bar Background/VBox/BottomRow/Project Title"]
margin_right = 127.0
margin_bottom = 22.0
custom_fonts/font = ExtResource( 5 )
custom_colors/font_color = Color( 0.247059, 0.247059, 0.247059, 1 )
text = "Current Project:"
align = 1

[node name="Current Project Name" type="Label" parent="Top Bar/Viewport/Top Bar Background/VBox/BottomRow/Project Title"]
margin_left = 135.0
margin_right = 485.0
margin_bottom = 22.0
rect_min_size = Vector2( 350, 0 )
custom_fonts/font = ExtResource( 5 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
valign = 1
autowrap = true
script = SubResource( 10 )

[node name="Software Version" type="Label" parent="Top Bar/Viewport/Top Bar Background"]
anchor_left = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -300.0
margin_top = 5.0
margin_right = -20.0
text = "test"
align = 2
script = SubResource( 11 )
[connection signal="dir_selected" from="Save Pages As PNG" to="Save Pages As PNG" method="_on_FileDialog_dir_selected"]
[connection signal="modal_closed" from="Save Pages As PNG" to="Save Pages As PNG" method="_on_FileDialog_modal_closed"]
[connection signal="popup_hide" from="Save Pages As PNG" to="Save Pages As PNG" method="_on_Save_Pages_As_PNG_popup_hide"]
[connection signal="tree_exited" from="Save Pages As PNG" to="Save Pages As PNG" method="_on_FileDialog_tree_exited"]
[connection signal="about_to_show" from="Projects" to="Projects" method="_on_Projects_about_to_show"]
[connection signal="currentProjectSet" from="Projects" to="Top Bar/Viewport/Top Bar Background/VBox/BottomRow/Project Title/Current Project Name" method="_on_Projects_currentProjectSet"]
[connection signal="popup_hide" from="Projects" to="Projects" method="_on_Projects_popup_hide"]
[connection signal="pressed" from="Projects/HBoxContainer/Create New" to="Projects/HBoxContainer/Create New/NewProject" method="_on_Create_New_pressed"]
[connection signal="confirmed" from="Projects/HBoxContainer/Create New/NewProject" to="Projects/HBoxContainer/Create New/NewProject" method="_on_NewProject_confirmed"]
[connection signal="newProject" from="Projects/HBoxContainer/Create New/NewProject" to="Projects" method="_on_NewProject_newProject"]
[connection signal="pressed" from="Projects/HBoxContainer/Open" to="Projects" method="_on_Open_pressed"]
[connection signal="pressed" from="Projects/HBoxContainer/Rename" to="Projects/HBoxContainer/Rename/Rename Popup" method="_on_Rename_pressed"]
[connection signal="confirmed" from="Projects/HBoxContainer/Rename/Rename Popup" to="Projects/HBoxContainer/Rename/Rename Popup" method="_on_Rename_Popup_confirmed"]
[connection signal="pressed" from="Projects/HBoxContainer/Delete" to="Projects/HBoxContainer/Delete" method="_on_Delete_pressed"]
[connection signal="renamed" from="Page View/ViewportContainer/Viewport/Page Instance" to="Side Bar/PageList Background/PageList" method="_on_Page_Instance_renamed"]
[connection signal="pressed" from="Side Bar/HBoxContainer/Add Page" to="Side Bar/PageList Background/PageList" method="_on_Add_Page_pressed"]
[connection signal="pressed" from="Side Bar/HBoxContainer/Remove Page" to="Side Bar/PageList Background/PageList" method="_on_Remove_Page_pressed"]
[connection signal="item_selected" from="Side Bar/PageList Background/PageList" to="Side Bar/PageList Background/PageList" method="_on_ItemList_item_selected"]
[connection signal="pressed" from="Top Bar/Viewport/Top Bar Background/VBox/TopRow/Projects" to="Projects" method="_on_Projects_pressed"]
[connection signal="pressed" from="Top Bar/Viewport/Top Bar Background/VBox/TopRow/Export" to="Save Pages As PNG" method="_on_Export_pressed"]
[connection signal="pressed" from="Top Bar/Viewport/Top Bar Background/VBox/TopRow/Files" to="Top Bar/Viewport/Top Bar Background/VBox/TopRow/Files" method="_on_Files_pressed"]
